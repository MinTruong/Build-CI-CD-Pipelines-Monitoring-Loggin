version: 2.1

orbs:
  slack: circleci/slack@4.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            ls -la
            npm install 
            npm run build
    
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #     - image: cimg/postgres:14.0
  #       environment: 
  #         POSTGRES_USER: postgres
  #         POSTGRES_DB: glee2
  #         POSTGRES_PASSWORD: password
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - setup_remote_docker: 
  #         version: 20.10.14
  #     - run:
  #         name: Build back-end
  #         command: |
  #           # code here
  #           echo $TYPEORM_ENTITIES
  #           cd backend
  #           npm install
  #           npm run start& 
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-tests]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-tests]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [scan-frontend]
      - run:
          name: Scan frontend 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [scan-backend]
      - run:
          name: Scan backend 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     # Add parameter here   
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           # Your code here
  #           exit 1
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: deploy backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: checkout
          command: |
            pwd
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
  Saving-Ip-EC2:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Check EC2
          command: |
            echo [all] > .circleci/ansible/inventory.txt 
            aws ec2 describe-instances \
            --filters "Name=tag:project,Values=udapeople" \
            --query "Reservations[*].Instances[].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
            
  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["82:2d:ef:37:52:14:5d:9f:2a:b5:39:d8:26:1e:f9:54"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:16.13.1
      # - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys:  [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: 
          - amazon/aws-cli
          - python:3.7-alpine3.11
          - circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure    
            
workflows:
  default:
    jobs:
      # - deploy-infrastructure
      # - Saving-Ip-EC2
      # - configure-infrastructure:
      #     requires: [Saving-Ip-EC2]
      # - build-frontend
      # - test-frontend:
      #     requires: [build-frontend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - build-backend
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - run-migrations:
      #     requires: [scan-backend]
      # - run-migrations
      # - build-backend

      - deploy-frontend